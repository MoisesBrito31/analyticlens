analyticLens - TODO

Atualize esta lista sempre que surgir uma nova ideia. Use [x] para concluído, [ ] para pendente e [–] para cancelado.

Frontend
- (FE 1) [x] Exibir status e metadados da VM em frontend/src/views/MachineDetailView.vue
- (FE 2) [x] Integrar frontend com endpoint de status da VM (GET /api/vms/{id})
- (FE 3) [x] Tratar erros e estados vazios na tela de máquina
- (FE 4) [ ] Componentizar seções de MachineDetailView.vue (arquivo está grande)
- (FE 5) [–] Adicionar polling para atualizar status periodicamente (cancelado: WebSocket via Socket.IO já implementado)
- (FE 6) [x] Edição de inspeção em modo ao vivo (modificações são refletidas imediatamente no fluxo da VM)
- (FE 7) [>] Gestão dos resultados das inspeções salvas (usabilidade)
- (FE 8) [ ] Melhorar sistema de usuário (manter usuário logado sob sessão)
- (FE 9) [ ] Melhorar sistema de usuário: definir tipos de usuários e limitar funções que cada usuário pode executar (baixa prioridade)

Backend
- (BE 1) [x] Centralizar atualização de status da VM em função única (ProtocoloVM.update_status)
- (BE 2) [x] Acionar atualização de status após comando start (VMAction.post + handlers)
- (BE 3) [x] Garantir nome do comando manual "trigger_trigger" (preferência atendida)
- (BE 4) [ ] Endpoint PUT /api/inspection_config com validações e permissões
- (BE 5) [-] Listagem/paginação/filtros de inspeções e metadados
- (BE 6) [ ] Autenticação com sessão/JWT + refresh; CSRF; timeouts
- (BE 7) [ ] RBAC: permission classes nos endpoints críticos (ex.: vm_action)
- (BE 8) [ ] Propagar parâmetros de configuração da Tool Blob
- (BE 9) [ ] Emissão/rotação de tokens para VM e handshake de WebSocket
- (BE 10) [ ] Log: endpoint/broker; retenção e indexação
- (BE 11) [ ] Configuração de integrações ModbusTCP/Ethernet-IP (mapeamentos, validação)
- (BE 12) [ ] Políticas de rejeição/aceitação e auditoria de I/O
- (BE 14) [ ] Compatibilidade de schema e endpoints de configuração para Tools

QA / Tests
- (QA 1) [x] Consolidar testes de ferramentas em vision_machine/test_tools.py
- (QA 2) [ ] Adicionar testes para função de status da VM (ProtocoloVM.update_status)
- (QA 3) [ ] Testes de integração FE↔BE↔VM (edição ao vivo)
- (QA 4) [ ] Testes de API e snapshot para listagem de inspeções
- (QA 5) [ ] Testes de autenticação (sessão/JWT)
- (QA 6) [ ] Testes de autorização (RBAC)
- (QA 7) [ ] Dataset e métricas para Tool Blob
- (QA 8) [ ] Testes de carga com JWT/WebSocket
- (QA 9) [ ] Testes de throughput para o pipeline de logs
- (QA 10) [ ] Testes simulados para ModbusTCP/Ethernet-IP
- (QA 11) [ ] Testes de integração para controle de I/O
- (QA 12) [ ] Testes de precisão e fixtures para Tools

Docs
- (DO 1) [ ] Criar diagrama UML da arquitetura atual (alto nível)
- (DO 2) [ ] Documentar setup e scripts no README
- (DO 3) [ ] Documentar fluxo/payloads da edição ao vivo
- (DO 4) [ ] Documentar endpoints e filtros da listagem de inspeções
- (DO 5) [ ] Guia de autenticação (login/logout, expiração)
- (DO 6) [ ] Matriz de permissões (RBAC)
- (DO 7) [ ] Documentação dos parâmetros da Tool Blob
- (DO 8) [ ] Segurança e operação com JWT/WebSocket
- (DO 9) [ ] Manual de operação e retenção de logs
- (DO 10) [ ] Pinagem/registradores para integrações industriais
- (DO 11) [ ] Documentação de uso das Tools

VM (Vision Machine - Servidor Flask)
- (VM 1) [x] Expor WebSocket via Flask-SocketIO (eventos connected, status_update, test_result)
- (VM 2) [x] Endpoints REST básicos: /api/status, /api/control, /api/*_config
- (VM 3) [x] Suporte a modos de trigger (continuous/trigger) e comando manual trigger
- (VM 4) [x] Atualizar heartbeat em trigger manual
- (VM 5) [ ] Implementar validações adicionais para configs (source/trigger/inspection)
- (VM 6) [ ] Adicionar métricas e healthcheck dedicados (ex.: /api/health, uptime)
- (VM 7) [ ] Cobrir com testes de integração WebSocket (cliente Socket.IO)
- (VM 8) [ ] Documentar API da VM (README com exemplos curl e eventos WS)
- (VM 9) [X] Revisar erros da Tool Blob: manchas pretas não são detectadas e manchas brancas com manchas pretas no seu interior,
    se pequenas, são ignoradas.
- (VM 10) [ ] Estudar a viabilidade técnica, sob a ótica de performance, de aplicar JWT entre VM e Orquestrador 
    (considerando o stream do WebSocket)
- (VM 11) [X] Projetar/implementar logging de resultados (VM responsável por gerar),
    com foco em performance
  - (VM 11.1) [x] Adicionar seção logging em config (vm_config.json):
    - enabled (bool), mode ("keep_last"|"keep_first"),
    - max_logs (int), policy ("ALL"|"APPROVED"|"REJECTED"),
    - batch_size (int), batch_ms (int)
  - (VM 11.2) [x] Formato de arquivo único por log (imagem binária + JSON):
    - header com tamanhos; bloco JPEG; bloco JSON (fixo)
  - (VM 11.3) [x] Buffer em memória + escrita assíncrona em thread:
    - deque limitado; flush por quantidade/tempo; métrica current_buffer_size
  - (VM 11.4) [X] Sincronização com orquestrador:
    - endpoint para iniciar transferência; após OK do orquestrador, apagar transmitidos
  - (VM 11.5) [x] Política de retenção respeitando max_logs e mode:
    - keep_last remove antigos; keep_first rejeita novos quando cheio
  - (VM 11.6) [X] Amostragem e imagem:
    - result_sampling (1/N), result_image ("thumb"|"full"); thumbnail opcional no JSON
  - (VM 11.7) [X] falha ao baixar log com VM rodando em uma rede diferente do orquestador (raspbarry)
- (VM 12) [ ] Adicionar comunicação ModbusTCP para integrar a VM a dispositivos industriais (baixa prioridade)
- (VM 13) [ ] Adicionar comunicação Ethernet/IP (dispositivos Rockwell) - (baixa prioridade)
- (VM 14) [ ] Implementar Tool EDGE: dada uma linha, identificar ao longo dela todas as bordas existentes e retornar a quantidade de bordas,
    seus pontos (x, y) e o ângulo em relação à linha informada
- (VM 15) [ ] Implementar Tool Locate: objetivo básico como a EDGE; com o resultado, reajustar
    a posição dos ROIs de todas as ferramentas subsequentes
- (VM 16) [ ] Implementar Tool Blob Locate: usará análises de blob para realocar o ROI de outras ferramentas
- (VM 17) [ ] Implementar Tool Measure: a partir de dois pontos, calcular a distância entre eles
    os pontos podem ser posições de edges ou centróides de blobs
- (VM 18) [ ] Implementar Tool Match: por meio de uma área de interesse da imagem, buscar formas com percentual 
    de similaridade com a referência
- (VM 19) [ ] Implementar Tool OCR (baixa prioridade)
- (VM 20) [ ] Implementar Tool de decodificação de códigos 1D (baixa prioridade)
- (VM 21) [ ] Implementar Tool de decodificação de códigos 2D (baixa prioridade)
- (VM 22) [ ] Implementar controle de I/O relacionado ao fluxo de inspeção (ex.: rejeição acionar I/O 2), gerando acionamento de registros 
    de protocolos industriais ou acionamento de GPIO em caso de Raspberry (baixa prioridade)




Mapa de Dependências e Hierarquia (FE ↔ Orquestrador ↔ VM ↔ QA/Docs)

- (FE 6) [X] Edição de inspeção em modo ao vivo (modificações refletidas imediatamente)
  - (VM 5) [X] VM: aplicar mudanças de configuração em tempo real; emitir eventos Socket.IO de confirmação/erro
    (    ) [X] VM: apois aplicação de edição online caso a vm esteja rodando source de picamera2 o componente responsável 
      pela picamera2 gera falha.
    - (BE 4) [X] Orquestrador (Django): endpoint para propagar atualizações (PUT /api/inspection_config); validações e permissões
      - (FE 6) [X] Frontend: UI de edição ao vivo com feedback (loading/erro), updates otimistas e rollback
      - (    ) [X] atualização para componente aovivoimg possa ser usado tanto para visualizar como editar 
      - (    ) [X] refatoração do Componente aovivoimg pois sua complexidade ficou muito alta
      - (    ) [x] adicionar função de reodernar ferramentas
      - (    ) [X] adicionar função de adicionar ferramentas novas, apagar e duplicar
      - (    ) [X] permitir alterar nome de ferramenta se procupando em que este seja unico
      - (    ) [X] adicionar edição de shapes do ROI de ferramentas     
        - (QA 3) [X] QA/Docs: testes de integração FE↔BE↔VM; documentar fluxo e payloads

- (VM 11) [X] Log de resultados (performance e responsabilidade)
  - (BE 10) [X] Orquestrador (Django): ingestão, retenção e indexação
    - (BE 10.1) [X] Modelos e migrações: InspectionResult, ToolResult
      - Índices: vm_id, inspection_id, timestamp, decision
      - Campos: image_url (string), thumb_base64 (opcional), width, height, tools_json (JSONB)
    - (BE 10.2) [X] API de ingestão: POST /api/results (autenticação por token da VM)
      - Validação de schema; aceitar imagem por URL (servida pela VM) ou upload opcional
    - (BE 10.3) [X] APIs de leitura: GET /api/results (paginado/filtrado) e GET /api/results/{id}
    - (BE 10.4) [X] Rotação/retensão: TTL/tamanho; tarefa agendada de limpeza
    - (BE 10.5) [X] Exportação: endpoints CSV/JSON
  - (VM 11) [X] VM: envio assíncrono, backoff e correlação (trace-id)
    - (QA 9) [X] QA/Docs: testes de throughput; manual de operação e retenção

- (FE 7) [ ] Gestão dos resultados das inspeções salvas (usabilidade)
  - (VM 1) [ ] VM: garantir payload consistente (mime, resolução, campos result/tools)
    - (BE 5) [ ] Orquestrador (Django): listagem/paginação/filtros; metadados (tempo, ferramenta, decisão)
      - (FE 7) [ ] Frontend: tabela com filtros, preview da imagem, detalhe com JSON e métricas; exportação (CSV/JSON)
        - (QA 4) [ ] QA/Docs: testes de API e snapshot de UI; documentação dos endpoints

- (FE 8) [ ] Melhorar sistema de usuário (sessão persistente)
  - (BE 6) [ ] Orquestrador (Django): estratégia de sessão/JWT + refresh; CSRF; timeouts
    - (FE 8) [ ] Frontend: guarda de rotas, persistência segura (storage), renovação de token
      - (QA 5) [ ] QA/Docs: testes de autenticação; guia de login/logout e expiração

- (FE 9) [ ] Definir papéis e permissões (RBAC) — baixa prioridade
  - (BE 7) [ ] Orquestrador (Django): papéis (admin, operador, visualizador); permission classes nos endpoints críticos (ex.: vm_action)
    - (FE 9) [ ] Frontend: esconder/desabilitar ações conforme papel; mensagens de permissão insuficiente
      - (QA 6) [ ] QA/Docs: testes de autorização; matriz de permissões documentada

- (VM 9) [ ] Revisar Tool Blob (detecção de manchas)
  - (VM 9) [ ] VM: ajustes de thresholds e morfologia; testes com imagens sintéticas
    - (BE 8) [ ] Orquestrador (Django): aceitar/propagar parâmetros de configuração da Tool Blob
      - (FE 6) [ ] Frontend: UI para parametrização (threshold, área mínima, circularidade); overlay de depuração
        - (QA 7) [ ] QA/Docs: dataset de teste, métricas de acurácia; documentação dos parâmetros

- (VM 10) [ ] JWT entre VM e Orquestrador (análise de performance)
  - (BE 9) [ ] Orquestrador (Django): emissão/rotação de tokens e segredo; handshake de WebSocket
    - (VM 10) [ ] VM: validação dos tokens nos endpoints/status/control; clock skew
      - (QA 8) [ ] QA/Docs: testes de carga; documentação de segurança e operação



- (VM 12) [ ] Integração industrial: ModbusTCP
  - (BE 11) [ ] Orquestrador (Django): UI/API para configurar mapeamentos; validações
    - (FE 7) [ ] Frontend: telas de configuração e diagnóstico; indicadores online/offline
      - (QA 10) [ ] QA/Docs: testes simulados; documentação de pinagem e registradores

- (VM 13) [ ] Integração industrial: Ethernet/IP
  - (BE 11) [ ] Orquestrador (Django): UI/API para configurar mapeamentos; validações
    - (FE 7) [ ] Frontend: telas de configuração e diagnóstico; indicadores online/offline
      - (QA 10) [ ] QA/Docs: testes simulados; documentação de pinagem e registradores

- (VM 22) [ ] Controle de I/O no fluxo de inspeção
  - (BE 12) [ ] Orquestrador (Django): políticas de rejeição/aceitação; auditoria
    - (FE 7) [ ] Frontend: toggles/botões de teste; estado em tempo real
      - (QA 11) [ ] QA/Docs: testes de integração com simulação; SOP de segurança

- (VM 14) [ ] Tool EDGE
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 15) [>] Tool Locate
  - (VM 15.1) [X] Especificação final: localizar borda (mudança de contraste) ao longo de uma seta (ROI), retornando ponto (x, y), ângulo (θ), polaridade detectada, score/confiança; suportar múltiplas bordas (lista) ou apenas a primeira/mais forte
  - (VM 15.2) [X] Schema de configuração (vm_config.json):
        tipo: "locate"; ROI: seta com `p0{x,y}`, `p1{x,y}` e sentido; 
        threshold_mode: "fixed"|"adaptive"; threshold; 
        polaridade: "dark_to_light"|"light_to_dark"|"any"; 
        max_edges (int, default 1), edge_select: "first"|"strongest"|"closest_to_mid"; 
        apply_transform (bool) para realocação de ferramentas subsequentes (default false);
        smooth_ksize, grad_kernel, canny_{low,high} (opcional)
  - (VM 15.3) [X] Algoritmo de detecção:
        amostrar ao longo da seta; para cada amostra, varrer pequena janela perpendicular para robustez; 
        calcular gradiente 1D (Sobel/derivada) e detectar picos conforme polaridade; 
        subpixel com refinamento (interpolação do pico); coletar até max_edges e ordenar por score
  - (VM 15.4) [X] Cálculo de transformação: a partir do ponto e ângulo, derivar (dx, dy, θ) e publicar para o pipeline
  - (VM 15.5) [X] Propagação: aplicar (dx, dy, θ) aos ROIs das ferramentas com order_index maior; respeitar coord. globais/locais
  - (VM 15.6) [X] Overlays/Debug: desenhar seta-ROI, pontos encontrados, normais/ângulo e setas de deslocamento; logs [LOCATE]
  - (VM 15.7) [X] Testes: casos sintéticos (translação/rotação/ruído); polaridades; múltiplas bordas; bordas fracas; métricas (erro px/°)
  - (VM 15.8) [ ] Performance: benchmarks; limitar amostragem por passo/resolução; early-exit; otimizações em CPU alvo
  - (VM 15.9) [X] Integração Orquestrador/FE: UI para desenhar/editar seta e parâmetros; validações; visualização de overlay
  - (VM 15.10) [X] Documentação: parâmetros, presets e troubleshooting
  - (BE 14) [X] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (BE 14.1) [X] Serializer/Schema: validar Tool Locate (arrow.p0/p1, threshold_mode, th_min, th_max, adaptive_k, polaridade, max_edges, edge_select, smooth_ksize, grad_kernel, apply_transform)
    - (BE 14.2) [x] Endpoint PUT /api/inspection_config: aceitar/update da Tool Locate; resposta com eco do schema normalizado
    - (BE 14.3) [x] Protocolo VM: enviar via comandos update_inspection_config/config_tool; idempotência e logs de debug (URL/payload/resposta)
    - (BE 14.4) [x] Endpoint preview opcional: POST /api/vms/{id}/tools/{tool_id}/preview (retorna edges, primary_point, primary_angle_deg)
    - (BE 14.5) [x] Persistência/Auditoria: versionar alterações em ferramentas (histórico básico)
    - (BE 14.6) [x] Ingestão de resultados: preservar `edges`/`primary_point`/`primary_angle_deg` no InspectionResult.result_json
    - (BE 14.7) [X] Testes: unitários (schema) e integração (PUT/preview) com mocks da VM
    - (FE 7) [x] Frontend: UI/overlays específicos; validações de entrada
      - (FE 7.1) [x] Desenhar/editar seta (2 cliques + drag), direção e binding para arrow.p0/p1
      - (FE 7.2) [x] Form de parâmetros: threshold_mode, th_min/th_max, adaptive_k, polaridade, max_edges, edge_select, smooth_ksize, grad_kernel, apply_transform
      - (FE 7.3) [x] Preview: chamar endpoint preview e renderizar edges/primary no overlay
      - (FE 7.4) [x] Persistir: salvar via PUT /api/inspection_config; feedback de validação/erro
      - (FE 7.5) [x] UX: indicar ROIs afetados quando apply_transform=true; tooltips/helps
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso
      - (QA 12.1) [x] Fixtures e testes de API (PUT/preview); snapshot de UI; guia de parâmetros e troubleshooting

- (VM 16) [ ] Tool Blob Locate
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 17) [ ] Tool Measure
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 18) [ ] Tool Match
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 19) [ ] Tool OCR
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 20) [ ] Decodificação de códigos 1D
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso

- (VM 21) [ ] Decodificação de códigos 2D
  - (BE 14) [ ] Orquestrador (Django): compatibilidade de schema; endpoints de configuração
    - (FE 7) [ ] Frontend: UI/overlays específicos; validações de entrada
      - (QA 12) [ ] QA/Docs: fixtures de imagens, testes de precisão; documentação de uso