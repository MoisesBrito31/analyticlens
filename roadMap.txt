## **ÔøΩÔøΩ Roadmap - Pr√≥ximos Passos para AnalyticLens**

### **üìã Fase 1: Estrutura Base e Autentica√ß√£o (‚úÖ CONCLU√çDA)**
- ‚úÖ Stack tecnol√≥gica definida (Vue 3 + Django)
- ‚úÖ Estrutura de arquivos organizada
- ‚úÖ Sistema de autentica√ß√£o implementado
- ‚úÖ Navega√ß√£o e rotas configuradas
- ‚úÖ Layout responsivo implementado
- ‚úÖ Componentes reutiliz√°veis criados

---

### **‚úÖ Atualiza√ß√µes recentes (2025-09-03)**
- **VM (modo de opera√ß√£o)**: Implementado `RUN` com limita√ß√£o de envio ao WebSocket (m√°ximo 1 atualiza√ß√£o/segundo). Em `TESTE`, o WebSocket n√£o tem limita√ß√£o e acompanha cada trigger/processamento.
- **Configura√ß√£o**: Adicionado par√¢metro `websocket_update_RUN_mode` em `vision_machine/vm_config.json` (fallback padr√£o 1.0s) para ajustar o intervalo no modo `RUN` sem alterar c√≥digo.
- **API/Orquestrador**: Atualizado `api/protocolo.py` para mapear modos `RUN ‚Üî PRODUCAO` e persistir `mode` corretamente no banco a partir do `/api/status` e do `change_mode`.

### **‚û°Ô∏è Pr√≥ximos passos correlatos**
- **Endpoint runtime (opcional)**: Expor `websocket_update_RUN_mode` via API REST para ajuste em tempo de execu√ß√£o.
- **Eventos WebSocket (opcional)**: Padronizar evento dedicado para `RUN` (ex.: `run_result`) caso desejado, mantendo compatibilidade com `test_result`.

### **ÔøΩÔøΩ Fase 2: Backend de Vis√£o Computacional (PR√ìXIMA PRIORIDADE)**

#### **2.1 M√≥dulo de Tools Base**
- [ ] Criar arquitetura modular para tools de vis√£o
- [ ] Implementar interface base `ToolBase` com contrato padr√£o
- [ ] Criar sistema de registro de tools
- [ ] Implementar tool "Blob Detection" como exemplo

#### **2.2 Endpoints da API**
- [ ] `GET /api/tools` - Listar tools dispon√≠veis
- [ ] `POST /api/tools/blob/run` - Executar tool blob
- [ ] `GET /api/tools/blob/params` - Par√¢metros da tool
- [ ] `POST /api/inspections/` - CRUD de inspe√ß√µes
- [ ] `GET /api/inspections/{id}/results` - Resultados das inspe√ß√µes

#### **2.3 Estrutura de Dados**
- [ ] Modelo `Inspection` para configura√ß√µes
- [ ] Modelo `InspectionResult` para resultados
- [ ] Modelo `ToolExecution` para logs de execu√ß√£o
- [ ] Serializers DRF para todas as entidades

---

### **ÔøΩÔøΩ Fase 3: Frontend - Canvas de Tools**

#### **3.1 Integra√ß√£o Vue Flow**
- [ ] Instalar e configurar `@vue-flow/core`
- [ ] Criar n√≥s customizados para cada tipo de tool
- [ ] Implementar drag & drop de tools no canvas
- [ ] Sistema de conex√µes entre tools (edges)

#### **3.2 Formul√°rios de Configura√ß√£o**
- [ ] Integrar FormKit para configura√ß√µes
- [ ] Formul√°rios din√¢micos baseados no tipo de tool
- [ ] Valida√ß√£o com Zod
- [ ] Preview em tempo real dos par√¢metros

#### **3.3 Interface de Edi√ß√£o**
- [ ] Toolbar com tools dispon√≠veis
- [ ] Painel de propriedades da tool selecionada
- [ ] Sistema de undo/redo
- [ ] Preview da pipeline de inspe√ß√£o

---

### **ÔøΩÔøΩ Fase 4: Execu√ß√£o e Monitoramento**

#### **4.1 Sistema de Execu√ß√£o**
- [ ] Execu√ß√£o de inspe√ß√µes em tempo real
- [ ] Fila de processamento de imagens
- [ ] Sistema de notifica√ß√µes (WebSocket)
- [ ] Logs de execu√ß√£o detalhados

#### **4.2 Dashboard de Monitoramento**
- [ ] M√©tricas em tempo real (FPS, precis√£o, lat√™ncia)
- [ ] Gr√°ficos de performance
- [ ] Alertas e notifica√ß√µes
- [ ] Hist√≥rico de execu√ß√µes

#### **4.3 Gest√£o de Imagens**
- [ ] Upload de imagens para teste
- [ ] Galeria de imagens processadas
- [ ] Compara√ß√£o antes/depois
- [ ] Exporta√ß√£o de resultados

---

### **üîê Fase 5: Funcionalidades Avan√ßadas**

#### **5.1 Sistema de Usu√°rios**
- [ ] Roles e permiss√µes (Admin, Operador, Visualizador)
- [ ] Auditoria de a√ß√µes
- [ ] Configura√ß√µes por usu√°rio

#### **5.2 Configura√ß√µes Globais**
- [ ] Configura√ß√µes de c√¢meras (IP, RTSP, resolu√ß√£o)
- [ ] Par√¢metros de rede e seguran√ßa
- [ ] Backup e reten√ß√£o de dados
- [ ] Configura√ß√µes de notifica√ß√µes

#### **5.3 Integra√ß√µes**
- [ ] Webhooks para sistemas externos
- [ ] API REST para integra√ß√£o com MES/ERP
- [ ] Exporta√ß√£o de dados (CSV, Excel, JSON)
- [ ] Backup autom√°tico para cloud

---

### **üöÄ Fase 6: Otimiza√ß√µes e Deploy**

#### **6.1 Performance**
- [ ] Cache de resultados de tools
- [ ] Otimiza√ß√£o de queries de banco
- [ ] Compress√£o de imagens
- [ ] Load balancing para m√∫ltiplas inst√¢ncias

#### **6.2 Deploy e Infraestrutura**
- [ ] Dockeriza√ß√£o da aplica√ß√£o
- [ ] CI/CD pipeline
- [ ] Monitoramento de infraestrutura
- [ ] Backup e disaster recovery

#### **6.3 Testes e Qualidade**
- [ ] Testes unit√°rios (Jest + PyTest)
- [ ] Testes de integra√ß√£o
- [ ] Testes E2E (Cypress/Playwright)
- [ ] Code coverage e an√°lise est√°tica

---

### **üéØ Prioridades Imediatas (Pr√≥ximas 2-3 Semanas)**

1. **Implementar tool "Blob Detection" no backend**
2. **Criar endpoints `/api/tools` e `/api/tools/blob/run`**
3. **Integrar Vue Flow no canvas de edi√ß√£o**
4. **Implementar formul√°rios com FormKit**
5. **Sistema b√°sico de execu√ß√£o de inspe√ß√µes**

---

### **üí° Tecnologias a Adicionar**

- **Backend**: `celery` (filas), `redis` (cache), `websockets`
- **Frontend**: `@vue-flow/core`, `@formkit/vue`, `chart.js`
- **DevOps**: `docker`, `docker-compose`, `nginx`
- **Testes**: `pytest`, `jest`, `cypress`

---

### **üìà M√©tricas de Sucesso**

- **Funcional**: Pipeline visual funcionando
- **Performance**: < 100ms para execu√ß√£o de tools simples
- **Usabilidade**: < 5 cliques para criar inspe√ß√£o b√°sica
- **Estabilidade**: 99.9% uptime em produ√ß√£o

