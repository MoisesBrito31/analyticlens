@startuml diagrama_classes_vm
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontName Arial

' Classes principais
class VisionMachine {
  - mode: str
  - source_config: Dict
  - trigger_config: Dict
  - inspection_config: Dict
  - inspection_processor: InspectionProcessor
  - error_message: str
  - error_timestamp: datetime
  + __init__(config_file: str)
  + start()
  + stop()
  + update_source_config(config: Dict)
  + update_trigger_config(config: Dict)
  + update_inspection_config(config: Dict)
  + set_error(message: str)
  + clear_error()
  + save_config()
  + load_config()
}

class FlaskVisionServer {
  - app: Flask
  - socketio: SocketIO
  - vm: VisionMachine
  + __init__(vm: VisionMachine)
  + start()
  + stop()
  - _setup_routes()
  - _setup_socketio()
}

class TestModeProcessor {
  - vm: VisionMachine
  - running: bool
  - frame_count: int
  - approved_count: int
  - rejected_count: int
  - trigger_lock: threading.Lock
  - trigger_requested: bool
  + __init__(vm: VisionMachine)
  + start()
  + stop()
  + request_trigger()
  - _process_loop()
  - _process_frame(frame)
  - _send_websocket_update(result)
  - _send_inspection_result(result)
}

' Sistema de Ferramentas
class InspectionProcessor {
  - config: Dict
  - tools: List[BaseTool]
  - results: Dict[int, Dict]
  + __init__(config: Dict)
  + process_inspection(image: np.ndarray)
  + get_tool_by_id(tool_id: int)
  + get_tools_by_type(tool_type: str)
  + validate_all_tools()
  - _initialize_tools()
  - _create_tool(tool_config: Dict)
  - _apply_roi_result(original_image, roi_result, roi)
  - _generate_final_result()
}

abstract class BaseTool {
  # id: int
  # name: str
  # type: str
  # roi: Dict
  # inspec_pass_fail: bool
  # reference_tool_id: int
  # config: Dict
  + __init__(config: Dict)
  + process(image: np.ndarray, roi_image: np.ndarray, previous_results: Dict)
  + extract_roi(image: np.ndarray)
  + get_reference_result(previous_results: Dict)
  + is_filter_tool(): bool
  + is_analysis_tool(): bool
  + is_math_tool(): bool
  + validate_config(): bool
}

class GrayscaleTool {
  - method: str
  - normalize: bool
  + process(image: np.ndarray, roi_image: np.ndarray, previous_results: Dict)
  + validate_config(): bool
}

class BlobTool {
  - th_min: int
  - th_max: int
  - area_min: float
  - area_max: float
  - test_total_area_min: float
  - test_total_area_max: float
  - test_blob_count_min: int
  - test_blob_count_max: int
  - total_area_test: bool
  - blob_count_test: bool
  + process(image: np.ndarray, roi_image: np.ndarray, previous_results: Dict)
  + validate_config(): bool
  - _run_internal_tests(blobs: List, total_area: float)
  - _calculate_centroid(contour)
}

class MathTool {
  - operation: str
  - reference_tool_id: int
  - custom_formula: str
  + process(image: np.ndarray, roi_image: np.ndarray, previous_results: Dict)
  + validate_config(): bool
  - _execute_operation(operation: str, value1: float, value2: float)
  - _evaluate_custom_formula(formula: str, values: Dict)
}

' Classes de fonte de imagem
class ImageSource {
  - source_type: str
  - config: Dict
  + __init__(config: Dict)
  + get_frame()
  + is_available()
  + close()
}

class FolderImageSource {
  - folder_path: str
  - image_files: List[str]
  - current_index: int
  + __init__(config: Dict)
  + get_frame()
  + is_available()
}

class LocalCameraSource {
  - camera_index: int
  - cap: cv2.VideoCapture
  + __init__(config: Dict)
  + get_frame()
  + is_available()
  + close()
}

class IPCameraSource {
  - url: str
  - cap: cv2.VideoCapture
  + __init__(config: Dict)
  + get_frame()
  + is_available()
  + close()
}

' Relacionamentos
VisionMachine --> InspectionProcessor : uses
VisionMachine --> ImageSource : uses
VisionMachine --> TestModeProcessor : uses

TestModeProcessor --> VisionMachine : processes for
TestModeProcessor --> InspectionProcessor : uses

InspectionProcessor --> BaseTool : manages
BaseTool <|-- GrayscaleTool : extends
BaseTool <|-- BlobTool : extends
BaseTool <|-- MathTool : extends

FlaskVisionServer --> VisionMachine : serves
FlaskVisionServer --> TestModeProcessor : communicates with

ImageSource <|-- FolderImageSource : extends
ImageSource <|-- LocalCameraSource : extends
ImageSource <|-- IPCameraSource : extends

' Notas
note right of InspectionProcessor
  Sistema de ferramentas modular
  - Execução sequencial
  - Cache de imagens processadas
  - Referências entre ferramentas
  - Medição de tempo
end note

note right of BaseTool
  Classe abstrata para todas as ferramentas
  - ROI extraction
  - Tool type classification
  - Configuration validation
end note

note right of TestModeProcessor
  Processador principal de teste
  - Modo contínuo e trigger
  - WebSocket updates
  - Contadores de aprovação/rejeição
end note

@enduml
