@startuml diagrama_classes_vm
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 10
skinparam classFontStyle bold
skinparam classBackgroundColor #E8F4FD
skinparam classBorderColor #2E86AB
skinparam classArrowColor #2E86AB

title Diagrama de Classes - Vision Machine (vm.py) - Estado Atual

' ========================================
' CLASSE PRINCIPAL: VisionMachine
' ========================================
class VisionMachine {
    -- Atributos de Identifica√ß√£o --
    + machine_id: str
    + django_url: str
    + config_file: str
    
    -- Estado da VM --
    + status: str
    + mode: str
    + connection_status: str
    + error_msg: str
    
    -- Configura√ß√µes --
    + source_config: Dict[str, Any]
    + trigger_config: Dict[str, Any]
    + inspection_config: Dict[str, Any]
    
    -- Componentes --
    + image_source: ImageSource
    
    -- M√©todos de Configura√ß√£o --
    + _load_config(): void
    + _set_default_config(): void
    + save_config(): void
    + _check_auto_start_inspection(): void
    
    -- M√©todos de Controle --
    + change_mode(new_mode: str): bool
    + set_error(error_message: str): void
    + clear_error(): bool
    
    -- M√©todos de Atualiza√ß√£o --
    + update_source_config(new_config: Dict): void
    + update_trigger_config(new_config: Dict): void
    + update_inspection_config(new_config: Dict): void
}

' ========================================
' CLASSE: ImageSource
' ========================================
class ImageSource {
    -- Atributos de Configura√ß√£o --
    + source_config: Dict[str, Any]
    + source_type: str
    + capture: cv2.VideoCapture
    + image_files: List[str]
    + current_image_index: int
    
    -- M√©todos de Inicializa√ß√£o --
    + _initialize_source(): void
    + _initialize_folder_source(): void
    + _initialize_camera_source(): void
    + _initialize_rtsp_source(): void
    
    -- M√©todos de Captura --
    + get_frame(): np.ndarray
    + _get_folder_frame(): np.ndarray
    + _get_camera_frame(): np.ndarray
    
    -- M√©todos de Gerenciamento --
    + release(): void
    + update_config(new_config: Dict): void
}

' ========================================
' CLASSE: TestModeProcessor
' ========================================
class TestModeProcessor {
    -- Atributos de Controle --
    + vm: VisionMachine
    + socketio: SocketIO
    + running: bool
    + processing_thread: Thread
    + frame_count: int
    + approved_count: int
    + rejected_count: int
    + last_websocket_update: float
    + websocket_update_interval: float
    
    -- M√©todos de Controle --
    + start(): void
    + stop(): void
    
    -- M√©todos de Processamento --
    + _processing_loop(): void
    + _process_frame(frame: np.ndarray): Dict[str, Any]
    + _send_websocket_update(result: Dict): void
}

' ========================================
' CLASSE: FlaskVisionServer
' ========================================
class FlaskVisionServer {
    -- Atributos do Servidor --
    + app: Flask
    + socketio: SocketIO
    + vm: VisionMachine
    + test_processor: TestModeProcessor
    
    -- M√©todos de Inicializa√ß√£o --
    + __init__(machine_id: str, django_url: str, config_file: str): void
    + _setup_shutdown_handlers(): void
    + _check_auto_start_inspection(): void
    + _cleanup(): void
    
    -- M√©todos de Configura√ß√£o --
    + _setup_routes(): void
    + _setup_socketio_events(): void
    
    -- M√©todos de Execu√ß√£o --
    + run(host: str, port: int, debug: bool): void
}

' ========================================
' CLASSE: Signal (Sistema)
' ========================================
class Signal {
    <<external>>
    + SIGINT: int
    + SIGTERM: int
}

' ========================================
' CLASSE: Atexit (Sistema)
' ========================================
class Atexit {
    <<external>>
    + register(func): void
}

' ========================================
' CLASSE: Threading (Sistema)
' ========================================
class Threading {
    <<external>>
    + Thread: class
}

' ========================================
' CLASSE: Flask (Framework)
' ========================================
class Flask {
    <<external>>
    + __init__(name: str): void
    + route(path: str): decorator
    + run(host: str, port: int): void
}

' ========================================
' CLASSE: SocketIO (Framework)
' ========================================
class SocketIO {
    <<external>>
    + __init__(app, **kwargs): void
    + on(event: str): decorator
    + emit(event: str, data: Any): void
    + run(app, **kwargs): void
}

' ========================================
' CLASSE: OpenCV (cv2)
' ========================================
class OpenCV {
    <<external>>
    + VideoCapture: class
    + imread(path: str): np.ndarray
}

' ========================================
' CLASSE: NumPy (np)
' ========================================
class NumPy {
    <<external>>
    + ndarray: class
    + random: module
}

' ========================================
' RELACIONAMENTOS
' ========================================

' VisionMachine cont√©m ImageSource
VisionMachine *-- ImageSource : cont√©m

' FlaskVisionServer cont√©m VisionMachine
FlaskVisionServer *-- VisionMachine : cont√©m

' FlaskVisionServer cont√©m TestModeProcessor
FlaskVisionServer *-- TestModeProcessor : cont√©m

' TestModeProcessor usa VisionMachine
TestModeProcessor --> VisionMachine : usa

' TestModeProcessor usa SocketIO
TestModeProcessor --> SocketIO : usa

' FlaskVisionServer usa Flask
FlaskVisionServer *-- Flask : usa

' FlaskVisionServer usa SocketIO
FlaskVisionServer *-- SocketIO : usa

' ImageSource usa OpenCV
ImageSource --> OpenCV : usa

' ImageSource usa NumPy
ImageSource --> NumPy : usa

' TestModeProcessor usa Threading
TestModeProcessor --> Threading : usa

' FlaskVisionServer usa Signal
FlaskVisionServer --> Signal : usa

' FlaskVisionServer usa Atexit
FlaskVisionServer --> Atexit : usa

' ========================================
' NOTAS EXPLICATIVAS
' ========================================
note top of VisionMachine
  Classe principal que gerencia:
  - Estado da VM (idle, running, error)
  - Configura√ß√µes persistentes
  - Source de imagem
  - Auto-start de inspe√ß√£o
end note

note top of ImageSource
  Gerencia diferentes fontes:
  - pasta: imagens de arquivo
  - camera: c√¢mera local
  - camera_IP: stream RTSP
  - Recria√ß√£o autom√°tica em caso de erro
end note

note top of TestModeProcessor
  Processa modo teste:
  - Loop de processamento em thread
  - Simula√ß√£o de inspe√ß√£o
  - WebSocket com rate limiting
  - Tratamento de erros robusto
end note

note top of FlaskVisionServer
  Servidor Flask principal:
  - API REST completa
  - WebSocket SocketIO
  - Handlers de shutdown
  - Auto-start de inspe√ß√£o
end note

note bottom of VisionMachine
  üîÑ Persist√™ncia autom√°tica:
  - Carrega de vm_config.json
  - Salva em mudan√ßas
  - Recupera de erros
  - Auto-start inteligente
end note

@enduml
