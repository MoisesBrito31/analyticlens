@startuml AnalyticLens_Class_Diagram

!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classFontName Arial
skinparam packageStyle rectangle

' ========================================
' PACKAGES
' ========================================
package "Frontend (Vue.js)" {
  package "Components" {
    class App {
      + mounted()
      + setup()
    }
    
    class DashboardView {
      + machines: Array
      + inspections: Array
      + systemStatus: Object
      + refreshData()
    }
    
    class MachineManagementView {
      + machines: Array
      + selectedMachine: Object
      + addMachine()
      + editMachine()
      + removeMachine()
      + viewMachineStatus()
    }
    
    class InspectionEditView {
      + inspectionData: Object
      + selectedMachine: Object
      + onPipelineUpdated()
      + saveInspection()
      + sendToMachine()
    }
    
    class ToolsCanvas {
      + elements: Array
      + selectedTool: Object
      + selectedNode: Object
      + addToolNode()
      + selectNode()
      + updateNodeParameters()
      + savePipeline()
    }
    
    class ToolProperties {
      + tool: Object
      + parameters: Object
      + update()
    }
    
    class ToolNode {
      + data: Object
      + position: Object
      + selectNode()
    }
    
    class LiveView {
      + currentImage: Object
      + inspectionStatus: String
      + startInspection()
      + stopInspection()
    }
    
    class ImageLogView {
      + imageHistory: Array
      + selectedImage: Object
      + viewImage()
      + downloadImage()
    }
  }
  
  package "Stores (Pinia)" {
    class AuthStore {
      + user: Object
      + isAuthenticated: Boolean
      + login()
      + logout()
      + fetchUser()
    }
    
    class MachinesStore {
      + machines: Array
      + selectedMachine: Object
      + fetchMachines()
      + addMachine()
      + updateMachine()
      + removeMachine()
      + getMachineStatus()
    }
    
    class ToolsStore {
      + availableTools: Array
      + selectedTool: Object
      + fetchTools()
      + selectTool()
      + clearSelection()
    }
    
    class InspectionsStore {
      + inspections: Array
      + createInspection()
      + fetchInspections()
      + updateInspection()
      + deleteInspection()
      + sendToMachine()
      + getResults()
    }
  }
  
  package "Utils" {
    class Validation {
      + VALIDATION_TYPES: Object
      + validators: Object
      + validateField()
      + validateObject()
      + createValidationRules()
    }
    
    class HttpClient {
      + baseURL: String
      + get()
      + post()
      + put()
      + delete()
    }
  }
}

package "Backend (Django - Orquestrador)" {
  package "Models" {
    class User {
      + username: String
      + email: String
      + first_name: String
      + last_name: String
      + is_active: Boolean
      + date_joined: DateTime
    }
    
    class InspectionMachine {
      + id: UUID
      + name: String
      + location: String
      + ip_address: GenericIPAddressField
      + port: Integer
      + status: String
      + last_heartbeat: DateTime
      + max_concurrent_inspections: Integer
      + current_inspections: Integer
      + supported_inspection_types: JSONField
      + hardware_specs: JSONField
      + public_token: String
      + ip_whitelist: Array
      + is_available: Boolean
      + api_url: String
    }
    
    class MachineHeartbeat {
      + machine: ForeignKey(InspectionMachine)
      + timestamp: DateTime
      + status: String
      + system_info: JSONField
      + performance_metrics: JSONField
    }
    
    class DistributedInspection {
      + id: UUID
      + machine: ForeignKey(InspectionMachine)
      + image: ImageField
      + inspection_type: String
      + status: String
      + pipeline_config: JSONField
      + created_at: DateTime
      + assigned_at: DateTime
      + started_at: DateTime
      + completed_at: DateTime
      + results: JSONField
      + error_message: Text
      + processing_time: Float
      + assign_to_machine()
      + mark_as_processing()
      + mark_as_completed()
      + mark_as_failed()
    }
    
    class InspectionQueue {
      + inspection: OneToOneField(DistributedInspection)
      + priority: Integer
      + queued_at: DateTime
    }
    
    class ToolBase {
      <<abstract>>
      + name: String
      + description: Text
      + version: String
      + is_active: Boolean
      + parameters_schema: JSONField
      + created_at: DateTime
      + updated_at: DateTime
      + get_parameters()
    }
    
    class BlobDetectionTool {
      + min_area: Integer
      + max_area: Integer
      + threshold_value: Integer
      + get_parameters()
    }
    
    class InspectionResult {
      + inspection: ForeignKey(DistributedInspection)
      + image_path: String
      + execution_time: Float
      + success: Boolean
      + error_message: Text
      + results_data: JSONField
      + created_at: DateTime
    }
  }
  
  package "Views (DRF)" {
    class MachineViewSet {
      + list()
      + retrieve()
      + create()
      + update()
      + destroy()
      + get_status()
      + get_heartbeat()
    }
    
    class InspectionViewSet {
      + list()
      + retrieve()
      + create()
      + update()
      + destroy()
      + send_to_machine()
      + get_results()
    }
    
    class MachineOrchestratorView {
      + discover_machines()
      + distribute_inspection()
      + collect_results()
      + manage_queue()
    }
    
    class WebhookReceiverView {
      + receive_results()
      + receive_heartbeat()
      + receive_status_update()
    }
  }
  
  package "Serializers" {
    class UserSerializer {
      + fields: Array
      + validate()
    }
    
    class InspectionMachineSerializer {
      + fields: Array
      + validate()
    }
    
    class DistributedInspectionSerializer {
      + fields: Array
      + validate()
    }
    
    class InspectionResultSerializer {
      + fields: Array
      + validate()
    }
  }
  
  package "Orchestration Engine" {
    class MachineManager {
      + machines: Dict
      + register_machine()
      + get_machine()
      + list_machines()
      + update_machine_status()
    }
    
    class TaskDistributor {
      + distribute_inspection()
      + select_best_machine()
      + manage_queue()
      + handle_failures()
    }
    
    class SecurityManager {
      + validate_token()
      + validate_ip()
      + generate_session_token()
      + manage_authentication()
    }
  }
}

package "Vision Machine (Flask)" {
  package "Core Server" {
    class VisionMachine {
      + machine_id: String
      + django_url: String
      + inspection_config: Dict
      + inspection_processor: InspectionProcessor
      + source_config: Dict
      + trigger_config: Dict
      + update_tool_config(tool_config)
      + delete_tool(tool_id)
      + save_config()
      + load_config()
    }
    
    class FlaskApp {
      + app: Flask
      + vm: VisionMachine
      + run()
      + register_routes()
    }
  }
  
  package "API Endpoints" {
    class ControlAPI {
      + /api/control
      + handle_config_tool()
      + handle_delete_tool()
      + handle_trigger_trigger()
      + handle_get_status()
    }
    
    class ConfigAPI {
      + /api/inspection_config
      + /api/source_config
      + /api/trigger_config
      + get_config()
      + update_config()
    }
    
    class WebhookHandler {
      + handle_heartbeat()
      + handle_status_update()
      + handle_inspection_received()
      + handle_results_sent()
    }
  }
  
  package "Security" {
    class AuthenticationMiddleware {
      + validate_request()
      + check_ip_whitelist()
      + verify_public_token()
      + generate_session_token()
    }
    
    class SecurityConfig {
      + ip_whitelist: Array
      + public_token: String
      + session_token: String
      + token_expiration: DateTime
    }
  }
  
  package "Inspection Engine" {
    class InspectionProcessor {
      + tools: Array
      + image_cache: Dict
      + process_image(image_path)
      + execute_tools(image)
      + get_tool_results()
      + clear_cache()
    }
    
    class ToolRegistry {
      + tools: Dict
      + register_tool()
      + get_tool()
      + list_tools()
    }
    
    class ImageProcessor {
      + load_image()
      + preprocess()
      + postprocess()
      + save_result()
    }
  }
  
  package "Tools System" {
    class BaseTool {
      <<abstract>>
      + id: Integer
      + name: String
      + type: String
      + roi: Dict
      + inspec_pass_fail: Boolean
      + reference_tool_id: Integer
      + process(image)
      + validate_parameters()
    }
    
    class GrayscaleTool {
      + method: String
      + normalize: Boolean
      + process(image)
    }
    
    class BlobTool {
      + th_min: Integer
      + th_max: Integer
      + area_min: Integer
      + area_max: Integer
      + test_area: Boolean
      + test_count: Boolean
      + process(image)
    }
    
    class MathTool {
      + operation: String
      + custom_formula: String
      + process(image)
    }
  }
  
  package "Communication" {
    class DjangoCommunicator {
      + django_url: String
      + session_token: String
      + send_heartbeat()
      + send_results()
      + send_status()
    }
    
    class HeartbeatService {
      + interval: Integer
      + start()
      + stop()
      + send_heartbeat()
    }
  }
  
  package "Testing" {
    class ToolsTestManager {
      + original_config: Dict
      + create_backup()
      + restore_backup()
      + test_processor_functionality()
      + test_config_tool()
      + test_delete_tool()
      + test_error_handling()
      + run_all_tests()
    }
  }
}

' ========================================
' RELACIONAMENTOS
' ========================================

' Frontend Relationships
App ||--o{ DashboardView : contains
App ||--o{ MachineManagementView : contains
App ||--o{ InspectionEditView : contains
App ||--o{ LiveView : contains
App ||--o{ ImageLogView : contains
InspectionEditView ||--o{ ToolsCanvas : contains
ToolsCanvas ||--o{ ToolNode : contains
ToolsCanvas ||--o{ ToolProperties : contains

' Store Relationships
AuthStore ||--o{ App : provides
MachinesStore ||--o{ MachineManagementView : provides
MachinesStore ||--o{ DashboardView : provides
ToolsStore ||--o{ ToolsCanvas : provides
InspectionsStore ||--o{ InspectionEditView : provides

' Backend Relationships
User ||--o{ DistributedInspection : creates
InspectionMachine ||--o{ DistributedInspection : processes
InspectionMachine ||--o{ MachineHeartbeat : generates
DistributedInspection ||--o{ InspectionResult : generates
DistributedInspection ||--o{ InspectionQueue : queued
ToolBase ||--o{ BlobDetectionTool : extends

' View Relationships
MachineViewSet ||--o{ InspectionMachineSerializer : uses
InspectionViewSet ||--o{ DistributedInspectionSerializer : uses
MachineOrchestratorView ||--o{ MachineManager : uses
MachineOrchestratorView ||--o{ TaskDistributor : uses
WebhookReceiverView ||--o{ SecurityManager : uses

' Orchestration Relationships
MachineManager ||--o{ InspectionMachine : manages
TaskDistributor ||--o{ DistributedInspection : distributes
SecurityManager ||--o{ InspectionMachine : authenticates

' Vision Machine Core Relationships
FlaskApp ||--o{ VisionMachine : contains
VisionMachine ||--o{ InspectionProcessor : uses
VisionMachine ||--o{ ToolRegistry : uses

' API Relationships
ControlAPI ||--o{ VisionMachine : controls
ConfigAPI ||--o{ VisionMachine : configures
FlaskApp ||--o{ ControlAPI : provides
FlaskApp ||--o{ ConfigAPI : provides

' Tools System Relationships
InspectionProcessor ||--o{ BaseTool : processes
BaseTool ||--o{ GrayscaleTool : extends
BaseTool ||--o{ BlobTool : extends
BaseTool ||--o{ MathTool : extends
ToolRegistry ||--o{ BaseTool : manages

' Security Relationships
FlaskApp ||--o{ AuthenticationMiddleware : uses
AuthenticationMiddleware ||--o{ SecurityConfig : validates

' Communication Relationships
FlaskApp ||--o{ HeartbeatService : runs
HeartbeatService ||--o{ DjangoCommunicator : uses

' Testing Relationships
ToolsTestManager ||--o{ VisionMachine : tests

' Cross-system Relationships
MachineViewSet ||--o{ ControlAPI : communicates
InspectionViewSet ||--o{ ControlAPI : communicates
WebhookReceiverView ||--o{ WebhookHandler : receives
TaskDistributor ||--o{ InspectionProcessor : distributes

' ========================================
' NOTES
' ========================================
note top of VisionMachine : "Servidor principal da Vision Machine com gerenciamento de tools dinâmico"
note top of InspectionProcessor : "Processa imagens usando pipeline de tools configurado"
note top of BaseTool : "Classe base para todas as ferramentas de visão computacional"
note top of GrayscaleTool : "Converte imagens para escala de cinza com múltiplos métodos"
note top of BlobTool : "Detecta e analisa objetos em imagens com testes configuráveis"
note top of MathTool : "Executa operações matemáticas sobre resultados de outras tools"
note top of ControlAPI : "API para controle dinâmico: config_tool, delete_tool, trigger_trigger"
note top of ToolsTestManager : "Sistema de testes automatizados com backup/restauração"
note top of InspectionMachine : "Representa uma máquina de visão na rede com autenticação e monitoramento"
note top of MachineManager : "Gerencia o ciclo de vida das máquinas de inspeção"
note top of TaskDistributor : "Distribui inspeções para máquinas disponíveis baseado em capacidade e carga"
note top of SecurityManager : "Gerencia autenticação mútua entre Django e máquinas Flask"
note top of AuthenticationMiddleware : "Valida IP whitelist e tokens de autenticação"
note top of HeartbeatService : "Serviço que mantém comunicação periódica com o orquestrador Django"

@enduml
