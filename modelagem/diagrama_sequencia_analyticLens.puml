@startuml AnalyticLens_Sequence_Diagram

!theme plain
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 150
skinparam sequenceArrowThickness 2
skinparam roundcorner 20

title "AnalyticLens - Fluxo de Execução de Inspeção"

actor "Usuário" as User
participant "Frontend\n(Vue.js)" as Frontend
participant "AuthStore\n(Pinia)" as AuthStore
participant "ToolsStore\n(Pinia)" as ToolsStore
participant "InspectionsStore\n(Pinia)" as InspectionsStore
participant "Django API" as API
participant "ToolRegistry" as Registry
participant "ToolExecutor" as Executor
participant "ImageProcessor" as Processor
database "Database\n(PostgreSQL)" as DB

== Autenticação ==
User -> Frontend: Acessa aplicação
Frontend -> AuthStore: Verifica autenticação
AuthStore -> API: GET /api/auth/me
API -> DB: Query user
DB --> API: User data
API --> AuthStore: User info
AuthStore --> Frontend: isAuthenticated = true

== Carregamento de Tools ==
Frontend -> ToolsStore: Carrega tools disponíveis
ToolsStore -> API: GET /api/tools
API -> Registry: Lista tools
Registry --> API: Tools disponíveis
API --> ToolsStore: Lista de tools
ToolsStore --> Frontend: Tools carregadas

== Criação de Inspeção ==
User -> Frontend: Cria nova inspeção
Frontend -> Frontend: Abre InspectionEditView
Frontend -> ToolsStore: Seleciona tool (ex: image_source)
ToolsStore --> Frontend: Tool selecionada

== Configuração da Tool ==
User -> Frontend: Configura parâmetros
Frontend -> Frontend: Valida parâmetros (JavaScript)
Frontend -> Frontend: Adiciona tool ao canvas
Frontend -> Frontend: Atualiza pipeline_config

== Upload de Imagem ==
User -> Frontend: Seleciona arquivo de imagem
Frontend -> Frontend: FileReader.readAsDataURL()
Frontend -> Frontend: URL.createObjectURL()
Frontend -> Frontend: Exibe preview da imagem

== Adição de Tool de Processamento ==
User -> Frontend: Adiciona tool (ex: blob_detection)
Frontend -> Frontend: Conecta tools no pipeline
Frontend -> Frontend: Configura parâmetros da tool

== Salvamento do Pipeline ==
User -> Frontend: Clica "Salvar Pipeline"
Frontend -> InspectionsStore: Salva inspeção
InspectionsStore -> API: POST /api/inspections/
API -> DB: Cria Inspection record
DB --> API: Inspection criada
API --> InspectionsStore: Confirmação
InspectionsStore --> Frontend: Pipeline salvo

== Execução do Pipeline ==
User -> Frontend: Clica "Executar Pipeline"
Frontend -> API: POST /api/tools/{tool_name}/run/
API -> Executor: Executa tool
Executor -> Processor: Processa imagem
Processor -> Processor: Aplica algoritmo (ex: blob detection)
Processor --> Executor: Resultado processado
Executor --> API: Resultado da execução
API -> DB: Salva InspectionResult
DB --> API: Result salvo
API --> Frontend: Resultado da execução

== Visualização dos Resultados ==
Frontend -> Frontend: Exibe imagem processada
Frontend -> Frontend: Mostra métricas e dados
Frontend -> Frontend: Exibe áreas detectadas (bounding boxes)

== Histórico e Relatórios ==
User -> Frontend: Acessa histórico
Frontend -> InspectionsStore: Carrega inspeções
InspectionsStore -> API: GET /api/inspections/
API -> DB: Query inspections
DB --> API: Lista de inspeções
API --> InspectionsStore: Dados das inspeções
InspectionsStore --> Frontend: Histórico carregado

note over Frontend, API : "Validação JavaScript puro\n(substitui Zod)"
note over Registry, Processor : "Arquitetura modular\nde tools de CV"
note over API, DB : "Django ORM + PostgreSQL"

@enduml
