@startuml AnalyticLens_Sequence_Diagram

!theme plain
skinparam sequenceMessageAlign center
skinparam responseMessageBelowArrow true
skinparam maxMessageSize 150
skinparam sequenceArrowThickness 2
skinparam roundcorner 20

title "AnalyticLens - Fluxo de Execução de Inspeção Distribuída"

actor "Usuário" as User
participant "Frontend\n(Vue.js)" as Frontend
participant "MachinesStore\n(Pinia)" as MachinesStore
participant "InspectionsStore\n(Pinia)" as InspectionsStore
participant "Django API\n(Orquestrador)" as DjangoAPI
participant "MachineManager" as MachineManager
participant "TaskDistributor" as TaskDistributor
participant "Máquina de Visão\n(Flask)" as MVFlask
participant "InspectionExecutor" as Executor
participant "ImageProcessor" as Processor
database "Database\n(PostgreSQL)" as DB

== Autenticação e Carregamento ==
User -> Frontend: Acessa aplicação
Frontend -> DjangoAPI: GET /api/auth/me
DjangoAPI -> DB: Query user
DB --> DjangoAPI: User data
DjangoAPI --> Frontend: User info

== Carregamento de Máquinas Disponíveis ==
Frontend -> MachinesStore: Carrega máquinas disponíveis
MachinesStore -> DjangoAPI: GET /api/machines/
DjangoAPI -> MachineManager: Lista máquinas online
MachineManager -> DB: Query InspectionMachine
DB --> MachineManager: Máquinas disponíveis
MachineManager --> DjangoAPI: Lista de máquinas
DjangoAPI --> MachinesStore: Máquinas carregadas
MachinesStore --> Frontend: Máquinas disponíveis

== Criação de Inspeção ==
User -> Frontend: Cria nova inspeção
Frontend -> Frontend: Abre InspectionEditView
Frontend -> Frontend: Configura pipeline de tools
Frontend -> Frontend: Seleciona máquina de destino
Frontend -> Frontend: Valida parâmetros (JavaScript)

== Salvamento do Pipeline ==
User -> Frontend: Clica "Salvar Pipeline"
Frontend -> InspectionsStore: Salva inspeção
InspectionsStore -> DjangoAPI: POST /api/inspections/
DjangoAPI -> DB: Cria DistributedInspection record
DB --> DjangoAPI: Inspeção criada
DjangoAPI --> InspectionsStore: Confirmação
InspectionsStore --> Frontend: Pipeline salvo

== Envio para Máquina de Visão ==
User -> Frontend: Clica "Enviar para Máquina"
Frontend -> DjangoAPI: POST /api/inspections/{id}/send/
DjangoAPI -> TaskDistributor: Distribui inspeção
TaskDistributor -> MachineManager: Seleciona melhor máquina
MachineManager -> DB: Verifica disponibilidade
DB --> MachineManager: Máquina disponível
TaskDistributor -> MVFlask: POST /receive_inspection
note right: Envia pipeline_config + imagem

== Processamento na Máquina de Visão ==
MVFlask -> MVFlask: Valida autenticação (IP + Token)
MVFlask -> Executor: Executa inspeção
Executor -> Executor: Carrega pipeline_config
Executor -> Processor: Processa imagem
Processor -> Processor: Executa tools do pipeline
Processor --> Executor: Resultado processado
Executor --> MVFlask: Resultado da execução

== Retorno dos Resultados ==
MVFlask -> DjangoAPI: POST /api/webhooks/results/
note right: Webhook com resultados + métricas
DjangoAPI -> DB: Salva InspectionResult
DB --> DjangoAPI: Result salvo
DjangoAPI -> DB: Atualiza status da inspeção
DB --> DjangoAPI: Status atualizado

== Atualização da Interface ==
DjangoAPI --> Frontend: WebSocket: Resultado disponível
Frontend -> InspectionsStore: Atualiza estado
InspectionsStore -> DjangoAPI: GET /api/inspections/{id}/
DjangoAPI -> DB: Query inspeção atualizada
DB --> DjangoAPI: Dados atualizados
DjangoAPI --> InspectionsStore: Inspeção atualizada
InspectionsStore --> Frontend: Resultado exibido

== Visualização dos Resultados ==
Frontend -> Frontend: Exibe imagem processada
Frontend -> Frontend: Mostra métricas e dados
Frontend -> Frontend: Exibe áreas detectadas (bounding boxes)
Frontend -> Frontend: Mostra tempo de processamento

== Monitoramento em Tempo Real ==
loop A cada 30 segundos
    MVFlask -> DjangoAPI: POST /api/webhooks/heartbeat/
    DjangoAPI -> DB: Atualiza MachineHeartbeat
    DjangoAPI -> DB: Atualiza status da máquina
    DjangoAPI --> Frontend: WebSocket: Status atualizado
    Frontend -> Frontend: Atualiza dashboard
end

== Histórico e Relatórios ==
User -> Frontend: Acessa histórico
Frontend -> InspectionsStore: Carrega inspeções
InspectionsStore -> DjangoAPI: GET /api/inspections/
DjangoAPI -> DB: Query DistributedInspection
DB --> DjangoAPI: Lista de inspeções
DjangoAPI --> InspectionsStore: Dados das inspeções
InspectionsStore --> Frontend: Histórico carregado

note over Frontend, DjangoAPI : "Validação JavaScript puro\n(substitui Zod)"
note over MachineManager, TaskDistributor : "Orquestração inteligente\nde tarefas distribuídas"
note over MVFlask, Executor : "Arquitetura modular\nde tools de CV"
note over DjangoAPI, DB : "Django ORM + PostgreSQL"
note over MVFlask, DjangoAPI : "Comunicação via\nWebhooks + API REST"

@enduml
