@startuml AnalyticLens_Component_Diagram

!theme plain
skinparam componentFontSize 12
skinparam componentFontName Arial
skinparam interfaceFontSize 10
skinparam componentStyle rectangle
skinparam componentBackgroundColor #E3F2FD
skinparam interfaceBackgroundColor #FFF3E0
skinparam databaseBackgroundColor #E8F5E8

title "AnalyticLens - Arquitetura de Componentes Distribuída"

package "Frontend (Vue.js 3)" {
  component "App.vue" as App
  component "DashboardView.vue" as DashboardView
  component "MachineManagementView.vue" as MachineManagementView
  component "InspectionEditView.vue" as InspectionEditView
  component "ToolsCanvas.vue" as ToolsCanvas
  component "ToolProperties.vue" as ToolProperties
  component "ToolNode.vue" as ToolNode
  component "AppHeader.vue" as AppHeader
  component "LoginView.vue" as LoginView
  component "InspectionsView.vue" as InspectionsView
  component "LiveView.vue" as LiveView
  component "ImageLogView.vue" as ImageLogView
  component "ConfigurationsView.vue" as ConfigurationsView
}

package "Stores (Pinia)" {
  component "AuthStore" as AuthStore
  component "MachinesStore" as MachinesStore
  component "ToolsStore" as ToolsStore
  component "InspectionsStore" as InspectionsStore
  component "CounterStore" as CounterStore
}

package "Utils & Services" {
  component "Validation" as Validation
  component "HttpClient" as HttpClient
  component "Router" as Router
  component "WebSocket" as WebSocket
}

package "Backend Django (Orquestrador)" {
  component "Django Server" as DjangoServer
  component "URLs" as URLs
  component "Middleware" as Middleware
  component "Settings" as Settings
}

package "API (Django REST Framework)" {
  component "MachineViewSet" as MachineViewSet
  component "InspectionViewSet" as InspectionViewSet
  component "MachineOrchestratorView" as MachineOrchestratorView
  component "WebhookReceiverView" as WebhookReceiverView
  component "AuthView" as AuthView
  component "Serializers" as Serializers
}

package "Models (Django ORM)" {
  component "User Model" as UserModel
  component "InspectionMachine Model" as InspectionMachineModel
  component "MachineHeartbeat Model" as MachineHeartbeatModel
  component "DistributedInspection Model" as DistributedInspectionModel
  component "InspectionQueue Model" as InspectionQueueModel
  component "ToolBase Model" as ToolBaseModel
  component "BlobDetectionTool Model" as BlobDetectionToolModel
  component "InspectionResult Model" as InspectionResultModel
}

package "Orchestration Engine" {
  component "MachineManager" as MachineManager
  component "TaskDistributor" as TaskDistributor
  component "SecurityManager" as SecurityManager
  component "QueueManager" as QueueManager
}

package "Máquinas de Visão (Flask)" {
  component "Flask App" as FlaskApp
  component "Machine API" as MachineAPI
  component "Authentication Middleware" as AuthMiddleware
  component "Security Config" as SecurityConfig
  component "Inspection Executor" as InspectionExecutor
  component "Tool Registry" as ToolRegistry
  component "Image Processor" as ImageProcessor
  component "Django Communicator" as DjangoCommunicator
  component "Heartbeat Service" as HeartbeatService
}

package "Computer Vision Tools" {
  component "BlobDetectionTool" as BlobDetectionTool
  component "EdgeDetectionTool" as EdgeDetectionTool
  component "ColorFilterTool" as ColorFilterTool
  component "ImageSourceTool" as ImageSourceTool
}

package "Database" {
  database "PostgreSQL" as PostgreSQL
}

package "External Dependencies" {
  component "OpenCV (cv2)" as OpenCV
  component "NumPy" as NumPy
  component "Pillow (PIL)" as Pillow
  component "Flask" as Flask
  component "Requests" as Requests
}

' ========================================
' INTERFACES E COMUNICAÇÕES
' ========================================

interface "HTTP REST API" as HTTPInterface
interface "Webhook Interface" as WebhookInterface
interface "WebSocket Interface" as WebSocketInterface
interface "File Upload" as FileUploadInterface
interface "Database Connection" as DBInterface

' Frontend Communications
App --> AuthStore : uses
App --> Router : uses
DashboardView --> MachinesStore : uses
MachineManagementView --> MachinesStore : uses
InspectionEditView --> ToolsCanvas : contains
InspectionEditView --> ToolProperties : contains
ToolsCanvas --> ToolNode : contains
ToolsCanvas --> ToolsStore : uses
InspectionEditView --> InspectionsStore : uses

' Store Communications
AuthStore --> HttpClient : uses
MachinesStore --> HttpClient : uses
ToolsStore --> HttpClient : uses
InspectionsStore --> HttpClient : uses

' Backend Communications
DjangoServer --> URLs : uses
URLs --> MachineViewSet : routes
URLs --> InspectionViewSet : routes
URLs --> MachineOrchestratorView : routes
URLs --> WebhookReceiverView : routes
URLs --> AuthView : routes

' API Communications
MachineViewSet --> Serializers : uses
InspectionViewSet --> Serializers : uses
MachineOrchestratorView --> MachineManager : uses
MachineOrchestratorView --> TaskDistributor : uses
WebhookReceiverView --> SecurityManager : uses

' Model Communications
MachineViewSet --> InspectionMachineModel : queries
InspectionViewSet --> DistributedInspectionModel : queries
MachineOrchestratorView --> InspectionQueueModel : queries
WebhookReceiverView --> MachineHeartbeatModel : creates

' Orchestration Communications
MachineManager --> InspectionMachineModel : manages
TaskDistributor --> DistributedInspectionModel : distributes
SecurityManager --> InspectionMachineModel : authenticates
QueueManager --> InspectionQueueModel : manages

' Flask Machine Communications
FlaskApp --> MachineAPI : provides
FlaskApp --> AuthMiddleware : uses
FlaskApp --> SecurityConfig : configures
FlaskApp --> InspectionExecutor : runs
FlaskApp --> HeartbeatService : starts
MachineAPI --> DjangoCommunicator : uses
HeartbeatService --> DjangoCommunicator : uses

' CV Tools Communications
InspectionExecutor --> ToolRegistry : uses
ToolRegistry --> BlobDetectionTool : manages
ToolRegistry --> EdgeDetectionTool : manages
ToolRegistry --> ColorFilterTool : manages
ToolRegistry --> ImageSourceTool : manages
InspectionExecutor --> ImageProcessor : uses

' Database Communications
UserModel --> PostgreSQL : stores
InspectionMachineModel --> PostgreSQL : stores
MachineHeartbeatModel --> PostgreSQL : stores
DistributedInspectionModel --> PostgreSQL : stores
InspectionQueueModel --> PostgreSQL : stores
ToolBaseModel --> PostgreSQL : stores
InspectionResultModel --> PostgreSQL : stores

' External Dependencies
ImageProcessor --> OpenCV : uses
ImageProcessor --> NumPy : uses
ImageProcessor --> Pillow : uses
FlaskApp --> Flask : uses
DjangoCommunicator --> Requests : uses

' Cross-system Communications
HttpClient --> HTTPInterface : communicates
MachineAPI --> HTTPInterface : provides
WebhookReceiverView --> WebhookInterface : receives
DjangoCommunicator --> WebhookInterface : sends
WebSocket --> WebSocketInterface : provides
ToolsCanvas --> FileUploadInterface : uses
DjangoServer --> DBInterface : connects

' ========================================
' NOTES
' ========================================
note top of Validation : "Sistema de validação\nJavaScript puro\n(substitui Zod)"
note top of MachineManager : "Gerencia ciclo de vida\ndas máquinas de inspeção"
note top of TaskDistributor : "Distribui inspeções\ninteligentemente"
note top of SecurityManager : "Autenticação mútua\nIP Whitelist + Tokens"
note top of FlaskApp : "Serviço independente\nem cada máquina de visão"
note top of PostgreSQL : "Banco centralizado\ncom todas as entidades"
note top of OpenCV : "Biblioteca principal\npara visão computacional"

@enduml
